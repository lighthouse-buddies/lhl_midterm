@startuml
'!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
'LAYOUT_TOP_DOWN()
package "database.operations" {
  !define Class(name, desc) class name as "desc" << (T,#FFAAAA) >>
  !define PrimaryKey(x) <u>x</u>
  !define ForeignKey(x) <color:purple>x</color>
  !define ModificationGroup(x) <color:blue>x</color>
  !define AccessingGroup(x) <color:green>x</color>
  !define NotNull(x) <color:red>x</color>
  !define DefaultNull(x) <color:orange>x</color>

  Class(Users, "Users") {
    +PrimaryKey(id: int)
    +NotNull(username: varchar)
    +NotNull(email: varchar)
    +NotNull(password: varchar)
    +DefaultNull(deleted_at: timestamp)
    +ModificationGroup(create(username, email, password))
    +ModificationGroup(updateUsername(email, password, newUsername))
    +ModificationGroup(updateEmail(email, password, newEmail))
    +ModificationGroup(updatePassword(email, password, newPassword))
    +ModificationGroup(remove(email, password))
    +AccessingGroup(getUserById(id)) -> {username, ...}
    +AccessingGroup(authenticate(email, password)) -> user_id / null
    +AccessingGroup(getUserIdByStoryId(story_id)) -> [story_id]
  }

  Class(Chapters, "Chapters") {
    +PrimaryKey(id: int)
    +NotNull(content: text)
    +prev: int
    +ForeignKey(user_id: int)
    +NotNull(created_at: timestamp)
    +DefaultNull(deleted_at: timestamp)
    +ModificationGroup(create(content, prev, email, password))
    +ModificationGroup(remove(id, email, password))
    +AccessingGroup(getChapterById(id)) -> {content, user_id}
    +AccessingGroup(getNextChapters(chapter_id)) -> [chapter_id]
    +AccessingGroup(getNextApprovedChapter(chapter_id)) -> chapter_id
    +AccessingGroup(getChaptersByUserId(user_id)) -> [chapter_id]
  }

  Class(Stories, "Stories") {
    +PrimaryKey(id: int)
    +NotNull(title: varchar)
    +ForeignKey(first_chapter_id: int)
    +ForeignKey(last_chapter_id: int)
    +NotNull(complete: bool)
    +DefaultNull(deleted_at: timestamp)
    +ModificationGroup(create(title, chapter_id, email, password))
    +ModificationGroup(remove(id, email, password))
    +ModificationGroup(approveChapter(story_id, chapter_id, email, password))
    +AccessingGroup(getTitleById(id)) -> {title}
    +AccessingGroup(getStoriesByUserId(user_id)) -> [story_id]
    +AccessingGroup(getStoryByChapterId(chapter_id)) -> story_id
  }

  Class(Votes, "Votes") {
    +PrimaryKey(id: int)
    +ForeignKey(user_id)
    +ForeignKey(chapter_id: int)
    +ModificationGroup(create(email, password, chapter_id))
    +ModificationGroup(remove(email, password, chapter_id))
    +AccessingGroup(getVoteCountByChapterId(chapter_id)) -> INT
    +AccessingGroup(getVoteCountByStoryId(chapter_id)) -> INT
  }

  note "Primary Key" as note_pk #00C0C0
  note "Foreign Key" as note_fk #800080
  note "Not Null" as note_notnull #FF0000
  note "Default Null" as note_default #FFA500
  note "methods: Modification Group" as note_Modification #0000FF
  note "methods: Accessing Group" as note_Accessing #008000
}

@enduml
